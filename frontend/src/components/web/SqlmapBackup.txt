import React, { useState } from 'react';

function Sqlmap() {
  const [inputText, setInputText] = useState('');
  const [result, setResult] = useState('');

  const formatResult = (resultString) => {
    const regexDb = /back-end DBMS '(.+?)'/m;
    const regexParameter = /Parameter: (\w+) \((\w+)\)/;
    const regexUrl = /GET (\S+)/;
    const nop = /all tested parameters do not appear to be injectable/;

    const dbMatch = regexDb.exec(resultString);
    const parameterMatch = regexParameter.exec(resultString);
    const urlMatch = regexUrl.exec(resultString);
    const nopa = nop.exec(resultString);

    if(nopa!=null)
    return "All tested parameters do not appear to be injectable";
  const formattedResult = (
    <>
    <br />
      <p>URL: {urlMatch ? urlMatch[1] : ''}</p>
      <br />
      <p>Parameter: {parameterMatch ? `${parameterMatch[1]}` : ''}</p>
      <p>Type: {parameterMatch ? `(${parameterMatch[2]})` : ''}</p>
      <br />
      <p>Database: {dbMatch ? dbMatch[1] : ''}</p>
      <br />

      <div>
        {resultString.match(/---\n([\s\S]*?)-- -\n/)[1].split('\n\n').map((result, i) => {
          const lines = result.split('\n');
          const type = lines[lines.length > 3 ? 1 : 0].split(':')[1].trim();
          const title = lines[lines.length > 3 ? 2 : 1].split(':')[1].trim();
          const payloadString = lines[lines.length > 3 ? 3 : 2].trim();

          return (
            <div key={i}>
              <p>Type: {type}</p>
              <p>Title: {title}</p>
              <p>Payload: {payloadString}</p>
              <br />
            </div>
          );
        })}
      </div>
    </>
  );
    return formattedResult;
  };

  const handleSubmit = async (event) => {
    event.preventDefault();
    try {
      const response = await fetch('http://localhost:3001/web', {
        method: 'POST',
        headers: {
          'Content-Type': 'text/plain'
        },
        body: inputText
      });
      const resultText = await response.text();
      setResult(formatResult(resultText));
    } catch (error) {
      console.error(error);
      setResult('Error processing text');
    }
  };

  const handleInput = (event) => {
    setInputText(event.target.value);
  };

  return (
    <div className='pt-32'>
      <h2>SQL Injection</h2>
      <form onSubmit={handleSubmit}>
        <label>
          Enter target url:
          <input type="text" value={inputText} onChange={handleInput} />
        </label>
        <button type="submit">Submit</button>
      </form>
      <div>
        Result: {result}
      </div>
    </div>
    

  );
}

export default Sqlmap;

